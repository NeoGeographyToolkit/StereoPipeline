#!/usr/bin/env python
# __BEGIN_LICENSE__
#  Copyright (c) 2009-2013, United States Government as represented by the
#  Administrator of the National Aeronautics and Space Administration. All
#  rights reserved.
#
#  The NGT platform is licensed under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance with the
#  License. You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# __END_LICENSE__


import sys, optparse, subprocess, re, os, time
import os.path as P

# Utilities to ensure that the Python parser does not garble negative
# integers such as '-365' into '-3'.
escapeStr='esc_rand_str'
def escape_vals(vals):
    for index, val in enumerate(vals):
        p = re.match("^-\d+$", val)
        if p:
            vals[index] = escapeStr + val
    return vals
def unescape_vals(vals):
    for index, val in enumerate(vals):
        p = re.match("^" + escapeStr + "(-\d+)$", val)
        if p:
            vals[index] = p.group(1)
    return vals

# Custom option parser that will ignore unknown options
class PassThroughOptionParser(optparse.OptionParser):
    def _process_args( self, largs, rargs, values ):

        rargs=escape_vals(rargs)
        largs=escape_vals(largs)

        while rargs:
            try:
                optparse.OptionParser._process_args(self,largs,rargs,values)
            except (optparse.BadOptionError), e:
                largs.append(e.opt_str)

# Execute a given command stored in the libexec directory and parse
# its output. The output format is expected to be lines of
# comma-separated values.  The first value on each line becomes the
# output variable name, the other values are read into the array of
# variable values.
def run_and_parse_output(cmd, args, verbose, **kw ):
    libexecpath = P.join(kw.get('path', P.dirname(P.abspath(__file__))), '..',\
                         'libexec', cmd)
    call = [libexecpath]
    call.extend(args)

    if verbose:
        print(" ".join(call))

    try:
        p = subprocess.Popen(call, stdout=subprocess.PIPE)
    except OSError, e:
        raise Exception('%s: %s' % (libexecpath, e))
    (stdout, stderr) = p.communicate()

    p.wait()
    if p.returncode != 0:
        print(stdout)
        print(stderr)
        raise Exception('Failed executing: ' + " ".join(call))
    data = {}
    for line in stdout.split('\n'):
        if "," in line:
            keywords = line.split(',')
            data[keywords[0]] = keywords[1:]

    return data

def die(msg, code=-1):
    print >>sys.stderr, msg
    sys.exit(code)

class BBox:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height

    def name_str(self):
        return "%i_%i_%i_%i" % ( self.x, self.y, self.width, self.height )

    def crop_str(self):
        return ["--trans-crop-win",str(self.x),
                str(self.y),str(self.width),str(self.height)]

def intersect_boxes(A, B):
    axmin = A.x; axmax = A.x + A.width; aymin = A.y; aymax = A.y + A.height
    bxmin = B.x; bxmax = B.x + B.width; bymin = B.y; bymax = B.y + B.height
    xmin = max(axmin, bxmin); xmax = min(axmax, bxmax)
    ymin = max(aymin, bymin); ymax = min(aymax, bymax)
    C = BBox(0, 0, 0, 0)
    C.x = xmin; C.width = xmax - xmin
    if (C.width  < 0): C.width = 0
    C.y = ymin; C.height = ymax - ymin
    if (C.height < 0): C.height = 0
    return C

# Find if a program is in the path
def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

def run(bin, args, opt, **kw):
    binpath = P.join(kw.get('path', P.dirname(P.abspath(__file__))), '..', 'bin', bin)
    call = [binpath]
    call.extend(args)

    if opt.dryrun or opt.verbose: print(" ".join(call))
    if opt.dryrun: return
    try:
        t_start = time.time()
        code = subprocess.call(call)
        if opt.verbose:
            wall_s = time.time() - t_start
            print('Wall time (s): {0:.1f}\n'.format(wall_s))
    except OSError, e:
        raise Exception('%s: %s' % (binpath, e))
    if code != 0:
        raise Exception('Stereo step ' + kw['msg'] + ' failed')

def run_sparse_disp(args, opt):

    settings   = run_and_parse_output( "stereo_parse", args, opt.verbose )
    left_img   = settings["trans_left_image"]
    right_img  = settings["trans_right_image"]
    out_prefix = settings["out_prefix"]

    sparse_args = left_img + right_img + out_prefix + ['--nodata-value', str(0)]
    if opt.sparse_disp_options is not None:
        sparse_args += opt.sparse_disp_options.split()

    # Pass the number of threads to sparse_disp
    # sparse_disp_options should trump
    if not any('--processes' in s for s in sparse_args):
        num_threads = 0
        if hasattr(opt, 'threads') and opt.threads is not None and opt.threads > 0:
            num_threads = opt.threads
        if hasattr(opt, 'threads_single') and opt.threads_single is not None and opt.threads_single > 0:
            num_threads = opt.threads_single
        if num_threads > 0:
            sparse_args += ['--processes', str(num_threads)]

    run('sparse_disp', sparse_args, opt, msg='1: Low-res correlation with sparse_disp')
